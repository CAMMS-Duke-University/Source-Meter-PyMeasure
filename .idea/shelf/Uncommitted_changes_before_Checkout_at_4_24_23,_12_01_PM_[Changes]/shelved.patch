Index: v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter\nimport tkinter.messagebox\nfrom tkinter import filedialog as fd\nimport customtkinter\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nfrom matplotlib import pyplot as plt, animation\nfrom pymeasure.instruments.keithley import Keithley2400  # Import the instrument of interest lib\nimport numpy as np\nimport pandas as pd\nfrom time import sleep\nfrom pymeasure.instruments import list_resources\nimport time\nfrom datetime import datetime\n\ncustomtkinter.set_appearance_mode(\"Dark\")  # Modes: \"System\" (standard), \"Dark\", \"Light\"\ncustomtkinter.set_default_color_theme(\"blue\")  # Themes: \"blue\" (standard), \"green\", \"dark-blue\"\n\n# ------------------- Here we search for the Instruments\ndef Get_Connected_Instruments():\n    # return [\"GPIB::01\",\"GPIB::02\",\"GPIB::03\",\"GPIB::04\",\"GPIB::05\",\"GPIB::06\",\"GPIB::07\",\"GPIB::08\"]\n    connected_instrument_names = []\n    for list_item in list_resources():\n        connected_instrument_names.append(list_item)\n    connected_instrument_names.pop(0)\n    if len(connected_instrument_names) == 0:\n        return [\"N/A Connected\"]\n    else:\n        return connected_instrument_names\n\n\n# The following function connects and configure the scientific instrument\n# returns the handler of this instrument as to use for start measuring voltage or current\ndef Instrument_Connection(instrument_name,  # Name Type and Port of Instrument\n                          measure_operation,  # \"Measure Voltage\" or \"Measure Current\"\n                          # ------------ for \"Measure Current\" Arguments\n                          apply_voltage_range,  # in Volts\n                          apply_compliance_current,  # in Amps\n                          measure_current_nplc,  # Number of power line cycles (NPLC) from 0.01 to 10\n                          measure_current,  # in Amps; Upper limit of current in Amps, from -1.05 A to 1.05 A\n                          measure_current_auto_range,  # Enables auto_range if True, else uses the set resistance\n                          # ------------ for \"Measure Current\" Arguments\n                          apply_current_range,  # A current_range value or None\n                          apply_compliance_voltage,  # A float in the correct range for a compliance_voltage\n                          measure_voltage_nplc,  # Number of power line cycles (NPLC) from 0.01 to 10\n                          measure_voltage,  # Upper limit of voltage in Volts, from -210 V to 210 V\n                          measure_voltage_auto_range  # Enables auto_range if True, else uses the set voltage\n                          ):\n    sourcemeter = Keithley2400(instrument_name)\n    sourcemeter.reset()\n    sourcemeter.use_front_terminals()\n    if measure_operation == \"Measure Current\":\n        sourcemeter.apply_voltage(voltage_range=apply_voltage_range, compliance_current=apply_compliance_current)\n        sourcemeter.measure_current(nplc=measure_current_nplc, current=measure_current,\n                                    auto_range=measure_current_auto_range)\n    if measure_operation == \"Measure Voltage\":\n        sourcemeter.apply_current(current_range=apply_current_range, compliance_voltage=apply_compliance_voltage)\n        sourcemeter.measure_voltage(nplc=measure_voltage_nplc, voltage=measure_voltage,\n                                    auto_range=measure_voltage_auto_range)\n    print(sourcemeter)\n    sleep(0.1)  # wait here to give the instrument time to react\n    return sourcemeter\n\n\n# ------------------- we have a Global value(dict): instruments_setup_values which contains the setup values\n# ------------------- When you pass the instruments information from the UI to the BackEnd\n# ------------------- the 1st object of this list is the instruments_setup_values\ndef Setup_Values(instruments_info):\n    instruments_setup_values = instruments_info[0]\n    print(\"Setup Values .........\")\n    print(instruments_setup_values)\n    return instruments_setup_values\n\n\ndef Print_Instruments_info(instruments_info):\n    for instrument in instruments_info:\n        print(\"Instruments .........\")\n        print(instrument)\n\n\ndef Setup_Instruments(instruments_setup_values, instruments_info):\n    print(\"Setup Instruments .........\")\n    sourcemeters = []\n    # ------------------- Here we Setup the Sourcemeter Instruments AND their process via the input data we will apply\n    for instrument in instruments_info:\n        print(\"Instrument ID: \", instrument[\"Instrument\"], \"- Port Number\", instrument[\"Port Number\"])\n        instrument_optionmenu = instrument['OptionMenu']\n        applied_values = []  # the values which will be applied\n        measure_operation = None  # measure type are \"Measure Voltage\" or \"Measure Current\"\n        # \"Measure Current\" corresponds to \"Apply Incremental Voltage\" & \"Apply Steady Voltage\"\n        # \"Measure Voltage\" corresponds to \"Apply Incremental Current\" & \"Apply Steady Current\"\n        if instrument_optionmenu == 'Apply Incremental Voltage':\n            measure_operation = \"Measure Current\"\n            applied_values = np.linspace(start=int(instrument['Min Voltage (Volts)']),\n                                         stop=int(instrument['Max Voltage (Volts)']),\n                                         num=int(instrument['Measurement Number']))\n        if instrument_optionmenu == 'Apply Steady Voltage':\n            measure_operation = \"Measure Current\"\n            applied_values = np.linspace(start=int(instrument['Steady Voltage (Volts)']),\n                                         stop=int(instrument['Steady Voltage (Volts)']),\n                                         num=int(instrument['Measurement Number']))\n        if instrument_optionmenu == 'Apply Incremental Current':\n            measure_operation = \"Measure Voltage\"\n            applied_values = np.linspace(start=float(instrument['Min Current (Amps)']),\n                                         stop=float(instrument['Max Current (Amps)']),\n                                         num=int(instrument['Measurement Number']))\n        if instrument_optionmenu == 'Apply Steady Current':\n            measure_operation = \"Measure Voltage\"\n            applied_values = np.linspace(start=float(instrument['Steady Current (Amps)']),\n                                         stop=float(instrument['Steady Current (Amps)']),\n                                         num=int(instrument['Measurement Number']))\n        print(\"Measure Option:\", measure_operation)\n        print(\"Applied Values:\", applied_values)\n        sourcemeter = Instrument_Connection(instrument_name=instrument['Port Number'],\n                                            measure_operation=measure_operation,\n                                            # ------------ for \"Measure Current\" Arguments\n                                            apply_voltage_range=None if instruments_setup_values[\n                                                                            \"Voltage Range [Measure Current]\"] == 'None' else float(\n                                                instruments_setup_values[\"Voltage Range [Measure Current]\"]),  # =None,\n                                            apply_compliance_current=float(\n                                                instruments_setup_values[\"Compliance Current [Measure Current]\"]),\n                                            # =10e-4,\n                                            measure_current_nplc=int(\n                                                instruments_setup_values[\"Power Line Cycles [Measure Current]\"]),  # =1,\n                                            measure_current=float(\n                                                instruments_setup_values[\"Current Range [Measure Current]\"]),\n                                            # =0.000105,\n                                            measure_current_auto_range=bool(\n                                                instruments_setup_values[\"Auto Range [Measure Current]\"]),  # =True\n                                            # ------------ for \"Measure Current\" Arguments\n                                            apply_current_range=None if instruments_setup_values[\n                                                                            \"Current Range [Measure Voltage]\"] == 'None' else float(\n                                                instruments_setup_values[\"Current Range [Measure Voltage]\"]),  # =None,\n                                            apply_compliance_voltage=float(\n                                                instruments_setup_values[\"Compliance Voltage [Measure Voltage]\"]),\n                                            # 0.1,\n                                            measure_voltage_nplc=int(\n                                                instruments_setup_values[\"Power Line Cycles [Measure Voltage]\"]),  # =1,\n                                            measure_voltage=float(\n                                                instruments_setup_values[\"Voltage Range [Measure Voltage]\"]),  # 21.0,\n                                            measure_voltage_auto_range=bool(\n                                                instruments_setup_values[\"Auto Range [Measure Voltage]\"]))  # True)\n        sourcemeters.append((instrument[\"Port Number\"], sourcemeter, applied_values, measure_operation))\n    return sourcemeters\n\ndef Store_Data_Rows(result_values, instruments_info):\n    instruments_num = len(result_values)\n    result_values_and_info = []\n    for i in range(0, instruments_num):\n        curr_port_number = instruments_info[i]['Port Number']\n        curr_applied_values = result_values[i][0]\n        curr_measured_values = result_values[i][1]\n        print(\"----------------------\")\n        print(\"Instrument:\", curr_port_number, \"Applied Values:\",curr_applied_values, \"Measured Values:\", curr_measured_values)\n        curr_values_and_info = (curr_port_number, curr_applied_values, curr_measured_values)\n        result_values_and_info.append(curr_values_and_info)\n    # print(result_values_and_info)\n    # datetime object containing current date and time\n    now = datetime.now()\n    pd.DataFrame(result_values_and_info).to_csv(\"data/Results-\"+ str(now.strftime(\"%d-%m-%Y-%H:%M:%S\")) + \".csv\")\n    print(\"...Saved\")\n\ndef Create_SCV_Columns(instruments_info):\n    csv_columns = ['Time (min)']\n    for instrument in instruments_info:\n        instrument_port = instrument['Port Number']\n        if instrument[\"OptionMenu\"] == \"Apply Steady Voltage\":\n            csv_columns.append(instrument_port + ' Voltage Set')\n            csv_columns.append(instrument_port + ' Current Measure')\n        if instrument[\"OptionMenu\"] == \"Apply Incremental Voltage\":\n            csv_columns.append(instrument_port + ' Voltage Set')\n            csv_columns.append(instrument_port + ' Current Measure')\n        if instrument[\"OptionMenu\"] == \"Apply Steady Current\":\n            csv_columns.append(instrument_port + ' Current Set')\n            csv_columns.append(instrument_port + ' Voltage Measure')\n        if instrument[\"OptionMenu\"] == \"Apply Incremental Current\":\n            csv_columns.append(instrument_port + ' Current Set')\n            csv_columns.append(instrument_port + ' Voltage Measure')\n    #print(csv_columns)\n    return csv_columns\n\ndef Store_Data(result_values, instruments_info, time_step, timestamps):\n    # result_values shape: Instrument X Applied-or-Measured X Measurement\n    result_values = np.array(result_values)\n    print(\"Results Shape:\",result_values.shape)\n    instruments_num = len(result_values)\n    print(\"Instruments Num:\", instruments_num)\n    measurements_num = len(result_values[0][0])\n    print(\"Measurements Num:\",measurements_num)\n    final_result_values = [[0]*(2*instruments_num+1)]*measurements_num\n    final_result_values = np.float64(final_result_values)\n    #-------------- First column is the time starting with Zero and increses with time_step\n    for t in range(0,measurements_num):\n        time_value_string = timestamps[t] # '00:00.000017'\n        min_time_value = float(time_value_string[0:2])\n        sec_min_time_value = float(time_value_string[3:])\n        # print(time_value_string)\n        # print(\"min:\",min_time_value,\"sec:\",sec_min_time_value)\n        final_result_values[t,0] = min_time_value + sec_min_time_value/60\n    #-------------- Reshape Data\n    final_result_values_column_counter = 1\n    for i in range(0, instruments_num):\n        for j in range(0, 2):\n            for k in range(0,measurements_num):\n                final_result_values[k,final_result_values_column_counter] = result_values[i,j,k]\n                # print(k,final_result_values_column_counter,\"<--\",i,j,k, \"Values:\", result_values[i,j,k])\n            final_result_values_column_counter +=1\n    final_result_columns = Create_SCV_Columns(instruments_info)\n    now = datetime.now()\n    df = pd.DataFrame(final_result_values, columns=final_result_columns)\n    df.to_csv(\"data/Results-\"+ str(now.strftime(\"%d-%m-%Y-%H:%M:%S\")) + \".csv\")\n    print(\"...Saved\")\n\n# CHecks if the Measurement Number is the same to all instruments (it's parralel process)\n# And selects the minimum number\ndef Correct_Measurements_Number(instruments_info):\n    instruments_num = len(instruments_info)\n    measurement_size = int(instruments_info[0]['Measurement Number'])\n    for i in range(0, instruments_num):\n        if measurement_size <  int(instruments_info[i]['Measurement Number']):\n            instruments_info[i]['Measurement Number'] = str(measurement_size)\n    return instruments_info\n\n\n\n\ndef change_appearance_mode_event(new_appearance_mode: str):\n    customtkinter.set_appearance_mode(new_appearance_mode)\n\n\ndef MouseWheelHandler(event):\n    global count\n\n    def delta(event):\n        if event.num == 5 or event.delta < 0:\n            return -1\n        return 1\n\n    count += delta(event)\n    print(count)\n\n\ndef Sub_Plot(axis, subplot_x, sublplot_y, x_data, y_data, plot_title, plot_x_label, plot_y_label):\n    axis[subplot_x, sublplot_y].plot(x_data, y_data)\n    axis[subplot_x, sublplot_y].set_title(plot_title)\n    axis[subplot_x, sublplot_y].set_xlabel(plot_x_label)\n    axis[subplot_x, sublplot_y].set_ylabel(plot_y_label)\n\n\ndef graph(data_path):\n    print(\"Data Path for Plotting:\",data_path)\n    df = pd.read_csv(data_path)\n    df_column_names = list(df.columns)[1:]\n    columns_num = len(df_column_names)\n    instruments_num = int((len(df_column_names) - 1) / 2)\n    print(df_column_names)\n    print(\"Number of columns:\", columns_num)\n    print(\"Number of instruments:\", instruments_num)\n    fig, axs = plt.subplots(instruments_num, 3)\n    column_pointer = 1\n    column_border = 0\n    for i in range(0, instruments_num):\n        Sub_Plot(axis=axs,\n                 subplot_x=2,\n                 sublplot_y=i,\n                 x_data=df[df_column_names[column_pointer]].values,\n                 y_data=df[df_column_names[column_pointer + 1]].values,\n                 plot_title=df_column_names[column_pointer][0:7],\n                 plot_x_label=df_column_names[column_pointer][7:],\n                 plot_y_label=df_column_names[column_pointer + 1][7:])\n        Sub_Plot(axis=axs,\n                 subplot_x=1,\n                 sublplot_y=i,\n                 x_data=df[df_column_names[0]].values,\n                 y_data=df[df_column_names[column_pointer + 1]].values,\n                 plot_title=df_column_names[column_pointer][0:7],\n                 plot_x_label=df_column_names[0],\n                 plot_y_label=df_column_names[column_pointer + 1][7:])\n        Sub_Plot(axis=axs,\n                 subplot_x=0,\n                 sublplot_y=i,\n                 x_data=df[df_column_names[0]].values,\n                 y_data=df[df_column_names[column_pointer]].values,\n                 plot_title=df_column_names[column_pointer][0:7],\n                 plot_x_label=df_column_names[0],\n                 plot_y_label=df_column_names[column_pointer][7:])\n        rect = plt.Rectangle(\n            # (lower-left corner), width, height\n            (0.01 + column_border, 0.01), 0.30, 0.97, fill=False, color=\"k\", lw=1,\n            zorder=1000, transform=fig.transFigure, figure=fig\n        )\n        fig.patches.extend([rect])\n        column_border += 0.334\n        column_pointer += 2\n    fig.tight_layout()\n    plt.show()\n\n\nclass App(customtkinter.CTk):\n    def __init__(self):\n        super().__init__()\n        self.instruments_search = \"N/A\"\n        self.instruments_setup_values = {\n            # ------------ for \"Measure Current\" Arguments\n            \"Voltage Range [Measure Current]\": \"None\",  # value (in Volts) or None\n            \"Compliance Current [Measure Current]\": \"1011E-4\",\n            # A floating point property that controls the compliance current in Amps\n            \"Power Line Cycles [Measure Current]\": \"1\",  # Number of power line cycles (NPLC) from 0.01 to 10\n            \"Current Range [Measure Current]\": \"0.000105\",  # in Amps; Upper limit of current in Amps, from -1.05 A\n            \"Auto Range [Measure Current]\": \"True\",  # Enables auto_range if True, else uses the set resistance\n            # ------------ for \"Measure Voltage\" Arguments\n            \"Current Range [Measure Voltage]\": \"None\",\n            \"Compliance Voltage [Measure Voltage]\": \"0.1\",\n            \"Power Line Cycles [Measure Voltage]\": \"1\",\n            \"Voltage Range [Measure Voltage]\": \"21.0\",\n            \"Auto Range [Measure Voltage]\": \"True\"\n        }\n        self.init_sidebar_value = \"1\"  # <--- The initial State (default Instrument Number displayed)\n        self.repetition_num = \"1\"\n        self.group_frame = None\n        self.entry_button = None\n        self.single_frame_form = None\n        self.single_frame_option_menu = None\n        self.single_frame_mode = None\n        self.single_frame_title_text = None\n        self.single_frame_title = None\n        self.single_frame_title_val = None\n        self.single_frame_label = None\n        self.single_frame_data = None\n        self.single_frame = None\n        self.single_frame_entry = None\n        self.filename = 'data/Results-06-04-2023-11:37:00.csv'\n        self.anim = None\n        self.line = None\n\n        # -----------------------------------------------------Window---------------------------------------------------\n        # configure window\n        self.title(\"Instruments Operation Control\")\n        self.geometry(f\"{1250}x{1150}\")  # {width}x{height}\n        self.grid_columnconfigure(1, weight=1)\n        self.grid_rowconfigure(1, weight=1)\n        # --------------------------------------------------Side Bar----------------------------------------------------\n        # Create sidebar Frame with widgets\n        self.sidebar_frame = customtkinter.CTkFrame(self, width=100, corner_radius=0)\n        self.sidebar_frame.grid(row=0, column=0, rowspan=5, columnspan=1, sticky=\"nsew\")\n        self.sidebar_frame.grid_rowconfigure(4, weight=1)\n        # Side Bar --> Title\n        self.sidebar_title_label = customtkinter.CTkLabel(master=self.sidebar_frame, text=\"Operation Panel\",\n                                                          font=(\"Calibre\", 16), anchor=\"nw\")\n        self.sidebar_title_label.grid(row=0, column=0, padx=20, pady=(10, 10))\n\n        # Side Bar Frame --> Search Instruments ------------------------------------------------------------------------\n        self.sidebar_instruments_search_frame = customtkinter.CTkFrame(master=self.sidebar_frame)\n        self.sidebar_instruments_search_frame.grid(row=1, column=0, sticky=\"nsew\", pady=(10, 10))\n        # ------------- Side Bar > Search Instruments Frame ---> Label Title\n        self.sidebar_search_instruments_label = customtkinter.CTkLabel(master=self.sidebar_instruments_search_frame,\n                                                                       text=\"Available Instruments\",\n                                                                       anchor=\"w\")\n        self.sidebar_search_instruments_label.grid(row=0, column=0, padx=10, pady=(10, 0))\n        # ------------- Side Bar > Search Instruments Frame ---> Button\n        self.sidebar_search_instruments_button = customtkinter.CTkButton(self.sidebar_instruments_search_frame,\n                                                                         width=70,\n                                                                         command=self.search_instrument_event,\n                                                                         text=\"Search\")\n        self.sidebar_search_instruments_button.grid(row=0, column=1, padx=1, pady=(10, 0))\n        # ------------- Side Bar > Search Instruments Frame ---> Label Value\n        self.sidebar_search_instruments_label_value = customtkinter.CTkLabel(self.sidebar_instruments_search_frame,\n                                                                             text=self.instruments_search,\n                                                                             anchor=\"nw\")\n        self.sidebar_search_instruments_label_value.grid(row=1, column=0, padx=20, pady=(10, 0))\n\n        # Side Bar Frame --> Select Instruments ------------------------------------------------------------------------\n        self.sidebar_instruments_select_frame = customtkinter.CTkFrame(master=self.sidebar_frame)\n        self.sidebar_instruments_select_frame.grid(row=2, column=0, sticky=\"nsew\")\n        # ------------- Side Bar > Select Instruments Frame ---> Label Title\n        self.sidebar_option_menu_label = customtkinter.CTkLabel(self.sidebar_instruments_select_frame,\n                                                                text=\"Select the Number of Instruments \\n you want to \"\n                                                                     \"operate\",\n                                                                anchor=\"w\")\n        self.sidebar_option_menu_label.grid(row=0, column=0, padx=20, pady=(10, 0))\n        # ------------- Side Bar > Select Instruments Frame ---> Option Menu\n        gpib_option_menu_values = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]\n        self.sidebar_option_menu = customtkinter.CTkOptionMenu(self.sidebar_instruments_select_frame,\n                                                               values=gpib_option_menu_values,\n                                                               command=self.sidebar_option_menu_event)\n        self.sidebar_option_menu.grid(row=1, column=0, padx=20, pady=(10, 10))\n        self.sidebar_option_menu.set(self.init_sidebar_value)\n\n        # Side Bar --> Appearance Mode (Extra Options)\n        self.appearance_mode_label = customtkinter.CTkLabel(self.sidebar_frame, text=\"Appearance Mode:\", anchor=\"w\")\n        self.appearance_mode_label.grid(row=7, column=0, padx=20, pady=(10, 0))\n        self.appearance_mode_option_menu = customtkinter.CTkOptionMenu(self.sidebar_frame,\n                                                                       values=[\"Light\", \"Dark\", \"System\"],\n                                                                       command=change_appearance_mode_event)\n        self.appearance_mode_option_menu.grid(row=8, column=0, padx=20, pady=(10, 10))\n        self.appearance_mode_option_menu.set(\"Dark\")\n        # Side Bar --> Window Scale (Extra Options)\n        self.scaling_label = customtkinter.CTkLabel(self.sidebar_frame, text=\"UI Scaling:\", anchor=\"w\")\n        self.scaling_label.grid(row=9, column=0, padx=20, pady=(10, 0))\n        self.scaling_option_menu = customtkinter.CTkOptionMenu(self.sidebar_frame,\n                                                               values=[\"80%\", \"90%\", \"100%\", \"110%\", \"120%\", \"130%\"],\n                                                               command=self.change_scaling_event)\n        self.scaling_option_menu.set(\"100%\")\n        self.scaling_option_menu.grid(row=10, column=0, padx=20, pady=(10, 20))\n\n        # --------------------------------------- Top Widget - Main Frame ----------------------------------------------\n        # Create the Top Main Frame\n        self.top_main_frame = customtkinter.CTkFrame(self, height=250, width=700, corner_radius=0)\n        self.top_main_frame.grid(row=0, column=1, padx=(20, 20), pady=(20, 0), sticky=\"W\")\n        # Top Frame --> Labels Will be updated\n        # Top Widget --> Instrument status ---------------------------------------------------------------\n        self.status_label_frame = customtkinter.CTkFrame(self.top_main_frame, corner_radius=0)\n        self.status_label_frame.grid(row=0, column=0, padx=(5, 20), pady=(20, 10), sticky=\"W\")\n\n        self.status_label_title = customtkinter.CTkLabel(self.status_label_frame,\n                                                         text=\"Number of Instruments Selected:\",\n                                                         font=(\"Calibre\", 18))\n        self.status_label_title.grid(row=0, column=0, padx=5, pady=(10, 0), sticky=\"W\")\n        self.status_label_value = customtkinter.CTkLabel(self.status_label_frame, text=self.init_sidebar_value,\n                                                         width=40,\n                                                         corner_radius=5,\n                                                         font=(\"Calibre\", 18),\n                                                         fg_color=\"#1F6AA5\")\n        self.status_label_value.grid(row=0, column=1, padx=(0, 20), pady=(10, 0), sticky=\"W\")\n        # Top Widget --> Default Values ---------------------------------------------------------------\n        self.top_main_instrumentation = customtkinter.CTkFrame(self.top_main_frame,\n                                                               # width=90,\n                                                               fg_color=\"#333333\",\n                                                               corner_radius=10)\n        self.top_main_instrumentation.grid(row=3, column=0, padx=(5, 5), pady=(5, 10), sticky=\"S\")\n\n        self.top_main_label_title = customtkinter.CTkLabel(self.top_main_instrumentation,\n                                                           text=\"Insert Instrument's Setup Values:\")\n        self.top_main_label_title.grid(row=0, column=0, sticky=tkinter.W, pady=2, padx=(5, 5))\n\n        curr_row_counter = 1\n        self.instruments_tk_setup_values = []\n        for curr_label, curr_entry in self.instruments_setup_values.items():\n            self.top_main_label_inst = customtkinter.CTkLabel(self.top_main_instrumentation, text=curr_label)\n            self.top_main_label_inst.grid(row=curr_row_counter, column=0, sticky=tkinter.W, pady=2, padx=(5, 5))\n            self.top_main_entry_inst = customtkinter.CTkEntry(self.top_main_instrumentation,\n                                                              corner_radius=0,\n                                                              width=300)\n            self.top_main_entry_inst.delete(0)\n            self.top_main_entry_inst.insert(0, curr_entry)\n            self.top_main_entry_inst.grid(row=curr_row_counter, column=1, pady=2, padx=(5, 5))\n            self.instruments_tk_setup_values.append((self.top_main_label_inst, self.top_main_entry_inst))\n            curr_row_counter = curr_row_counter + 1\n\n        # --------------------------------------- Core Widget - Main Frame ---------------------------------------------\n        # Create the Core Main Frame with widgets\n        self.main_frame = customtkinter.CTkScrollableFrame(self, height=400, width=700, corner_radius=0)\n        self.main_frame.grid(row=1, column=1, padx=(20, 20), pady=(20, 0), sticky=\"W\")\n        # Main Frame --> Generate Individual Frame Data for each GPIB\n        # \"group_data\" refer to all the data which will be completed and will be sent to the GPIBs\n        # \"group_data_tk\" refer to all the tk data relevant to the group_data which operate the UI\n        self.group_data = []  # 3D-Array (1st: the individual frame; 2nd: the label; 3rd: the entry)\n        self.group_data_tk = []\n        self.generate_group_frame()\n\n        # --------------------------------------------------Right Side Bar----------------------------------------------\n        # Create RIGHT sidebar Frame with widgets\n        self.right_sidebar_frame = customtkinter.CTkFrame(self, height=300, width=120, corner_radius=0)\n        self.right_sidebar_frame.grid(row=0, column=2, sticky=\"NW\")\n        # Side Bar --> Title\n        self.right_sidebar_title_label = customtkinter.CTkLabel(master=self.right_sidebar_frame, text=\"Plots Panel\",\n                                                                font=(\"Calibre\", 16), anchor=\"n\")\n        self.right_sidebar_title_label.grid(row=0, column=0, padx=20, pady=(10, 10))\n\n        self.plot_file_button = customtkinter.CTkButton(master=self.right_sidebar_frame,\n                                                        text='Open a File',\n                                                        command=self.select_file)\n        self.plot_file_button.grid(row=1, column=0, pady=10, padx=20, sticky=\"w\")\n        self.plot_file_name_title = customtkinter.CTkLabel(master=self.right_sidebar_frame, text=\"File Selected:\",\n                                                           font=(\"Calibre\", 15))\n        self.plot_file_name_title.grid(row=2, column=0, padx=(5,0), pady=(10, 0), sticky=\"w\")\n        self.plot_file_name_label = customtkinter.CTkLabel(master=self.right_sidebar_frame, font=(\"Calibre\", 12),\n                                                           text=\"No File Selected\")\n        self.plot_file_name_label.grid(row=3, column=0, padx=(5,0), pady=(0,10), sticky=\"w\")\n        self.plot_button = customtkinter.CTkButton(master=self.right_sidebar_frame,\n                                                   command= lambda: graph(self.filename),\n                                                   text=\"Show Graph\")\n        self.plot_button.grid(row=4, column=0, pady=10, padx=20, sticky=\"w\")\n\n\n    # ----------------------------------This Generates the GPIB Group Frames--------------------------------------------\n    def generate_group_frame(self):\n        # Group Frame which includes GPIBs\n        self.group_frame = customtkinter.CTkFrame(self.main_frame, width=120, corner_radius=0)\n        self.group_frame.grid(row=2, column=2, padx=(20, 20), pady=(20, 20), sticky=\"W\", columnspan=2)\n        self.group_frame.grid_rowconfigure(1, weight=1)\n        self.group_data_tk = []\n        if len(self.group_data) == 0:  # <----- the initial state\n            self.sidebar_option_menu_event(self.status_label_value.cget(\"text\"))\n        else:\n            for i in range(0, int(self.status_label_value.cget(\"text\"))):\n                # Single Frame\n                self.single_frame = customtkinter.CTkFrame(self.group_frame, width=190)\n                self.single_frame.grid(row=i + 1, column=0, padx=(5, 5), pady=(5, 10), sticky=\"W\")\n                self.single_frame_data = self.group_data[i]\n                self.group_data_tk.append(self.generate_single_frame)\n\n        self.measure_button_frame = customtkinter.CTkFrame(self.group_frame)\n        self.measure_button_frame.grid(row=1, column=1, padx=(20, 5), pady=(0, 5))\n\n        self.entry_button = customtkinter.CTkButton(master=self.measure_button_frame, command=self.measure_event,\n                                                    text=\"Start Measurement\")\n        self.entry_button.grid(row=0, column=0, pady=10, padx=20, sticky=\"n\")\n        self.entry_button_label = customtkinter.CTkLabel(self.measure_button_frame, font=(\"Calibre\", 12),\n                                                         text=\"Number of Repetitions\")\n        self.entry_button_label.grid(row=1, column=0, pady=0, padx=20, sticky=\"W\")\n\n        self.entry_button_entry = customtkinter.CTkEntry(self.measure_button_frame,\n                                                         corner_radius=0,\n                                                         width=50)\n        self.entry_button_entry.delete(0)\n        self.entry_button_entry.insert(0, self.repetition_num)\n        self.entry_button_entry.grid(row=1, column=2, pady=0, padx=5, sticky=\"W\")\n\n    # ----------------------------------This Generates the GPIB Group Frames--------------------------------------------\n    @property\n    def generate_single_frame(self):\n        single_frame_tuple = []\n        # Generate Single Form --> Head\n        self.single_frame_title = customtkinter.CTkFrame(self.single_frame)\n        self.single_frame_title.grid(row=0, column=0, padx=(5, 5), pady=(5, 5))\n        self.single_frame_title_text = customtkinter.CTkLabel(self.single_frame_title, font=(\"Calibre\", 16),\n                                                              text=\"Instrument \")\n        self.single_frame_title_text.grid(row=0, column=0, padx=(5, 1))\n        self.single_frame_title_val = customtkinter.CTkLabel(self.single_frame_title, font=(\"Calibre\", 16),\n                                                             text=self.single_frame_data.get(\"Instrument\"))\n        self.single_frame_title_val.grid(row=0, column=1, padx=(1, 5))\n        single_frame_tuple.append((\"Instrument\", self.single_frame_title_val))\n\n        # Generate Single Form --> Option Menu\n        self.single_frame_mode = customtkinter.CTkFrame(self.single_frame, width=120)\n        self.single_frame_mode.grid(row=1, column=0, padx=(5, 5), pady=(0, 5))\n        single_frame_mode_values = [\"Apply Incremental Voltage\",\n                                    \"Apply Steady Voltage\",\n                                    \"Apply Incremental Current\",\n                                    \"Apply Steady Current\"\n                                    ]\n        self.single_frame_option_menu = customtkinter.CTkOptionMenu(self.single_frame_mode,\n                                                                    values=single_frame_mode_values,\n                                                                    command=self.single_frame_mode_event)\n        self.single_frame_option_menu.set(self.single_frame_data.get(\"OptionMenu\"))\n        self.single_frame_option_menu.grid(row=0, column=0, padx=20, pady=(5, 5))\n        single_frame_tuple.append((\"OptionMenu\", self.single_frame_option_menu))\n        # Generate the Single Form --> Labels & Entries\n        # Form Line \"row_counter\" --> Label Will be updated (\"row_counter\")\n        self.single_frame_form = customtkinter.CTkFrame(self.single_frame, width=120, corner_radius=0)\n        self.single_frame_form.grid(row=2, column=0)\n        row_counter = 0\n        for label, entry in self.single_frame_data.items():\n            if label != \"Instrument\" and label != \"OptionMenu\":\n                self.single_frame_label = customtkinter.CTkLabel(self.single_frame_form, text=label)\n                self.single_frame_label.grid(row=row_counter, column=0, sticky=tkinter.W, pady=2, padx=(5, 5))\n                self.single_frame_entry = customtkinter.CTkEntry(self.single_frame_form,\n                                                                 corner_radius=0,\n                                                                 width=150)\n                self.single_frame_entry.delete(0)\n                self.single_frame_entry.insert(0, entry)\n                self.single_frame_entry.grid(row=row_counter, column=1, pady=2, padx=(5, 5))\n                single_frame_tuple.append((self.single_frame_label, self.single_frame_entry))\n                row_counter += 1\n        return single_frame_tuple\n\n    # ------------------------------- This Updates the Number of GPIB Frames--------------------------------------------\n    def sidebar_option_menu_event(self, new_appearance_mode: str):\n        self.status_label_value.configure(text=new_appearance_mode)\n        print(\"Status:\", self.status_label_value.cget(\"text\"))\n        # ---------------- Generate frames relative to the inserted GPIB number\n        self.group_data = []\n        for i in range(0, int(self.status_label_value.cget(\"text\"))):\n            self.group_data.append({\n                \"Instrument\": str(i + 1),\n                \"OptionMenu\": \"Apply Incremental Voltage\",\n                \"Port Number\": \"GPIB::\" + str(i),\n                \"Measurement Number\": str(10 + i),\n                \"Min Voltage (Volts)\": str(i),\n                \"Max Voltage (Volts)\": str(i + 10)\n            })\n        self.group_frame.destroy()\n        self.generate_group_frame()\n\n    # ------------------------------- This Updates the Single GPIB Operation--------------------------------------------\n    def single_frame_mode_event(self, single_frame_mode: str):\n        # -------------------------------------------------------------------------------------------------------------------------\n        updated_group_data = []\n        # ---------- Generate the new data based on the Intput from TK\n        for single_group_data_tk in self.group_data_tk:\n            single_group_data = dict(Instrument=single_group_data_tk[0][1].cget(\"text\"),\n                                     OptionMenu=single_group_data_tk[1][1].get())\n            for i in range(2, len(single_group_data_tk)):\n                single_group_data[str(single_group_data_tk[i][0].cget(\"text\"))] = str(single_group_data_tk[i][1].get())\n            updated_group_data.append(single_group_data)\n\n        new_group_data = []\n        for i in range(len(self.group_data)):\n            print(\"Instrument: \", i + 1)\n            previous_single_data = self.group_data[i]\n            updated_single_data = updated_group_data[i]\n            if previous_single_data[\"OptionMenu\"] != updated_single_data[\"OptionMenu\"]:\n                print(\"CHANGED\")\n                if updated_single_data[\"OptionMenu\"] == \"Apply Steady Voltage\":\n                    new_single_group_data = {\n                        \"Instrument\": previous_single_data[\"Instrument\"],\n                        \"OptionMenu\": updated_single_data[\"OptionMenu\"],\n                        \"Port Number\": updated_single_data[\"Port Number\"],\n                        \"Measurement Number\": updated_single_data[\"Measurement Number\"],\n                        \"Steady Voltage (Volts)\": str(10),\n                    }\n                if updated_single_data[\"OptionMenu\"] == \"Apply Incremental Voltage\":\n                    new_single_group_data = {\n                        \"Instrument\": previous_single_data[\"Instrument\"],\n                        \"OptionMenu\": updated_single_data[\"OptionMenu\"],\n                        \"Port Number\": updated_single_data[\"Port Number\"],\n                        \"Measurement Number\": updated_single_data[\"MMeasurement Number\"],\n                        \"Min Voltage (Volts)\": str(1),\n                        \"Max Voltage (Volts)\": str(10)\n                    }\n                if updated_single_data[\"OptionMenu\"] == \"Apply Steady Current\":\n                    new_single_group_data = {\n                        \"Instrument\": previous_single_data[\"Instrument\"],\n                        \"OptionMenu\": updated_single_data[\"OptionMenu\"],\n                        \"Port Number\": updated_single_data[\"Port Number\"],\n                        \"Measurement Number\": updated_single_data[\"Measurement Number\"],\n                        \"Steady Current (Amps)\": str(10),\n                    }\n                if updated_single_data[\"OptionMenu\"] == \"Apply Incremental Current\":\n                    new_single_group_data = {\n                        \"Instrument\": previous_single_data[\"Instrument\"],\n                        \"OptionMenu\": updated_single_data[\"OptionMenu\"],\n                        \"Port Number\": updated_single_data[\"Port Number\"],\n                        \"Measurement Number\": updated_single_data[\"Measurement Number\"],\n                        \"Min Current (Amps)\": str(1),\n                        \"Max Current (Amps)\": str(10)\n                    }\n                new_group_data.append(new_single_group_data)\n            else:  # <-------- if there is no change at the OptionMenu we keep it the same (previous)\n                new_group_data.append(previous_single_data)\n\n            # print(\"Before:\", previous_single_data)\n            print(\"   New:\", new_group_data)\n        self.group_data = new_group_data\n        # -------------------------------------------------------------------------------------------------------------------------\n        self.group_frame.destroy()\n        self.generate_group_frame()\n\n    def update_instruments_setup_values_event(self):\n        # ---------- Take the new Instrument data from Top Main Frame from TK\n        updated_instruments_setup_values = {}\n        for single_setup_value in self.instruments_tk_setup_values:\n            single_setup_value_label = single_setup_value[0].cget(\"text\")\n            single_setup_value_value = single_setup_value[1].get()\n            # print(single_setup_value_label,single_setup_value_value)\n            updated_instruments_setup_values[single_setup_value_label] = single_setup_value_value\n        return updated_instruments_setup_values\n\n    def update_instruments_functional_values_event(self):\n        updated_group_data = []\n        # ---------- Generate the new data based on the Intput from TK\n        for single_group_data_tk in self.group_data_tk:\n            single_group_data = dict(Instrument=single_group_data_tk[0][1].cget(\"text\"),\n                                     OptionMenu=single_group_data_tk[1][1].get())\n            for i in range(2, len(single_group_data_tk)):\n                single_group_data[str(single_group_data_tk[i][0].cget(\"text\"))] = str(single_group_data_tk[i][1].get())\n            updated_group_data.append(single_group_data)\n        return updated_group_data\n\n    def measure_event(self):\n        self.repetition_num = self.entry_button_entry.get()\n        # print(\"Repetition Number:\", self.repetition_num )\n        self.group_data = self.update_instruments_functional_values_event()\n        # print(self.group_data)\n        self.instruments_setup_values = self.update_instruments_setup_values_event()\n        for rep in range(0, int(self.repetition_num)):\n            print(\"Repetition:\", rep + 1)\n            task_result = self.Task_0_array([self.instruments_setup_values] + self.group_data)\n            # <--- a list of dictionaries, each dictornery is an instrument\n            print(task_result)\n\n    def search_instrument_event(self):\n        get_connected_instuments = Get_Connected_Instruments()\n        delimiter_value = \"\\n\"  # initializing delimiter\n        res = ''\n        for ele in get_connected_instuments:  # using loop to add string followed by delim\n            res = res + str(ele) + delimiter_value\n        self.sidebar_search_instruments_label_value.configure(text=res)\n\n    def change_scaling_event(self, new_scaling: str):\n        new_scaling_float = int(new_scaling.replace(\"%\", \"\")) / 100\n        customtkinter.set_widget_scaling(new_scaling_float)\n\n    def select_file(self):\n        filetypes = (('text files', '*.csv'), ('All files', '*.*'))\n        self.filename = fd.askopenfilename(title='Open a file', filetypes=filetypes)\n        print(self.filename)\n        self.plot_file_name_label.configure(text=self.filename[-23:])\n\n    def Task_0_array(self, instruments_info):\n        time_step = 0.25\n        instruments_setup_values = Setup_Values(instruments_info)\n        instruments_info.pop(\n            0)  # ------------------- remove the 1st element which contains the instruments_setup_values\n        instruments_info = Correct_Measurements_Number(instruments_info)  # selects the minimum number of measurements\n        Print_Instruments_info(instruments_info)\n        # ------------------- Here we Setup the instruments and ready execution\n        sourcemeters = Setup_Instruments(instruments_setup_values, instruments_info)\n        # print(\"Sourcemeter:\",sourcemeters)\n        # ------------------- Here we Start the measurements in parallel execution\n        # return_values = Start_Instruments_Sequential(sourcemeters)\n        return_values, timestamps = self.Start_Instruments_Parallel(sourcemeters,\n                                                               time_step)  # is a list of tuples (applied_values,\n        # measured_values)\n        # print(\"Returned Values:\",return_values)\n        Store_Data(return_values, instruments_info, time_step, timestamps)\n\n        print(\"-----------\\n\")\n        return \"GOOD!\"\n\n    def Start_Instruments_Parallel(self, sourcemeters, time_step):\n        if len(sourcemeters) >= 1:\n            print(\"Start Measure .........\")\n            return_values, timestamps = self.Measure_Multi_Instruments(sourcemeters, time_step)\n            return return_values, timestamps\n        else:\n            print(\"No Instruments are selected\")\n            return None\n\n    # The following function apply a list of continuous voltages,\n    # measure a list of continuous currents, and return this list of current\n    def Measure_Multi_Instruments(self, sourcemeters_info, time_step):\n        # the Argument sourcemeters_info is a list of lists: a 2-D list\n        # the outer list corresponds to the used Instruments, each item of the outer list refers to a sole Instrument object\n        # each Instrument object (inner list) contains the following items:\n        # item 0 => [Instrument][0]: Instrument ID,\n        # item 1 => [Instrument][1]: Keithley2400 sourcemeter connection reference/pointer\n        # item 2 => [Instrument][2]: list of input values of this Instrument,\n        # item 3 => [Instrument][3]: measure_operation, if the Instrument Apply Voltage and Measure Current or the opposite\n        instruments_num = len(sourcemeters_info)  # Number of used Instruments\n        # --------- Initiate\n        values_size = len(sourcemeters_info[0][2])\n        sourcemeters = []  # we create a list of the reference/pointer for each sourcemeter\n        applied_values = []  # we create a 2-D array; each row is the Instrument; each column is the parallel applied value\n        measured_values = []  # we create a 2-D array; each row is the Instrument; each column is the parallel measured value\n        measure_operations = []  # we create a list of the operations for each sourcemeter if measure Current or Voltage\n        for i in range(0, instruments_num):\n            sourcemeters.append(sourcemeters_info[i][1])\n            applied_values.append(sourcemeters_info[i][2])\n            measured_values.append(np.zeros(values_size))\n            measure_operations.append(sourcemeters_info[i][3])\n        applied_values = np.array(applied_values)\n        measured_values = np.array(measured_values)\n        # --------- Enable sourcemeters\n        for sourcemeter in sourcemeters:\n            sourcemeter.enable_source()\n        # --------- Measure\n        timestamps = []\n        time_init = datetime.now()\n        self.openNewWindow()\n        for i in range(0, values_size):\n            # --------- take timer\n            now = datetime.now()\n            time_difference = now - time_init\n            # print(time_difference, type(time_difference),str(time_difference)[2:])\n            timestamps.append(str(time_difference)[2:])\n            for j in range(0, instruments_num):  # Parallel\n                current_sourcemeter = sourcemeters[j]\n                current_measure_operation = measure_operations[j]\n                current_applied_value = applied_values[j, i]\n                if current_measure_operation == \"Measure Current\":\n                    current_sourcemeter.source_voltage = current_applied_value\n                    measured_value = current_sourcemeter.current\n                    measured_values[j, i] = measured_value\n                    self.animate_data(x=current_applied_value, y=measured_value)\n\n                elif current_measure_operation == \"Measure Voltage\":\n                    current_sourcemeter.source_current = current_applied_value\n                    measured_value = current_sourcemeter.voltage\n                    measured_values[j, i] = measured_value\n                    self.animate_data(x=current_applied_value, y=measured_value)\n            time.sleep(time_step)\n        # print(timestamps)\n        # --------- Disable sourcemeters\n        for sourcemeter in sourcemeters:\n            sourcemeter.disable_source()\n        # --------- Construct the results in tuples (applied values, measured values) for each instrument\n        my_results = []\n        for i in range(0, instruments_num):\n            my_results.append((list(applied_values[i]), list(measured_values[i])))\n            # print(\"------------Instrument:\", i+1)\n            # print(\" Applied Values:\", applied_values[i])\n            # print(\" Measured Values:\", measured_values[i])\n        return my_results, timestamps\n\n    def animate(self, i):\n        x = np.linspace(0, 2, 1000)\n        y = np.sin(2 * np.pi * (x - 0.01 * i))\n        self.line.set_data(x, y)\n        return self.line,\n\n    def animate_data(self, x, y):\n        self.line.set_data(x, y)\n        return self.line,\n\n    def openNewWindow(self):\n        print(\"test\")\n        # Toplevel object which will be treated as a new window\n        self.newWindow = customtkinter.CTkToplevel(self)\n        # sets the title of the\n        # Toplevel widget\n        self.newWindow.title(\"New Window\")\n        # sets the geometry of toplevel\n        self.newWindow.geometry(\"200x200\")\n        # A Label widget to show in toplevel\n        customtkinter.CTkLabel(master=self.newWindow, text=\"This is a new window\")\n\n        fig = plt.Figure(dpi=100)\n        ax = fig.add_subplot(xlim=(0, 2), ylim=(-1, 1))\n        self.line, = ax.plot([], [], lw=2)\n        canvas = FigureCanvasTkAgg(fig, master=self.newWindow)\n        canvas.get_tk_widget().pack(side=customtkinter.TOP, fill=customtkinter.BOTH, expand=1)\n\n        self.anim = animation.FuncAnimation(fig, self.animate, frames=1000, interval=100, blit=True)\n\nif __name__ == \"__main__\":\n    app = App()\n    count = 0\n    app.bind(\"<MouseWheel>\", MouseWheelHandler)\n    app.bind(\"<Button-4>\", MouseWheelHandler)\n    app.bind(\"<Button-5>\", MouseWheelHandler)\n    app.mainloop()\n
===================================================================
diff --git a/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py b/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py
--- a/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py	
+++ b/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py	
@@ -757,6 +757,8 @@
         # --------- Measure
         timestamps = []
         time_init = datetime.now()
+        self.x_plot = 0
+        self.y_plot = 0
         self.openNewWindow()
         for i in range(0, values_size):
             # --------- take timer
@@ -772,13 +774,15 @@
                     current_sourcemeter.source_voltage = current_applied_value
                     measured_value = current_sourcemeter.current
                     measured_values[j, i] = measured_value
-                    self.animate_data(x=current_applied_value, y=measured_value)
+                    self.x_plot = current_applied_value
+                    self.y_plot = measured_value
 
                 elif current_measure_operation == "Measure Voltage":
                     current_sourcemeter.source_current = current_applied_value
                     measured_value = current_sourcemeter.voltage
                     measured_values[j, i] = measured_value
-                    self.animate_data(x=current_applied_value, y=measured_value)
+                    self.x_plot = current_applied_value
+                    self.y_plot = measured_value
             time.sleep(time_step)
         # print(timestamps)
         # --------- Disable sourcemeters
@@ -799,8 +803,9 @@
         self.line.set_data(x, y)
         return self.line,
 
-    def animate_data(self, x, y):
-        self.line.set_data(x, y)
+    def animate_data(self, i):
+        print(i)
+        self.line.set_data(self.x_plot, self.y_plot)
         return self.line,
 
     def openNewWindow(self):
@@ -821,7 +826,7 @@
         canvas = FigureCanvasTkAgg(fig, master=self.newWindow)
         canvas.get_tk_widget().pack(side=customtkinter.TOP, fill=customtkinter.BOTH, expand=1)
 
-        self.anim = animation.FuncAnimation(fig, self.animate, frames=1000, interval=100, blit=True)
+        self.anim = animation.FuncAnimation(fig, self.animate_data, frames=1000, interval=100, blit=True)
 
 if __name__ == "__main__":
     app = App()
Index: v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter\nimport tkinter.messagebox\nfrom tkinter import filedialog as fd\nimport customtkinter\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nfrom matplotlib import pyplot as plt, animation\nfrom pymeasure.instruments.keithley import Keithley2400  # Import the instrument of interest lib\nimport numpy as np\nimport pandas as pd\nfrom time import sleep\nfrom pymeasure.instruments import list_resources\nimport time\nfrom datetime import datetime\n\ncustomtkinter.set_appearance_mode(\"Dark\")  # Modes: \"System\" (standard), \"Dark\", \"Light\"\ncustomtkinter.set_default_color_theme(\"blue\")  # Themes: \"blue\" (standard), \"green\", \"dark-blue\"\n\n# ------------------- Here we search for the Instruments\ndef Get_Connected_Instruments():\n    # return [\"GPIB::01\",\"GPIB::02\",\"GPIB::03\",\"GPIB::04\",\"GPIB::05\",\"GPIB::06\",\"GPIB::07\",\"GPIB::08\"]\n    connected_instrument_names = []\n    for list_item in list_resources():\n        connected_instrument_names.append(list_item)\n    connected_instrument_names.pop(0)\n    if len(connected_instrument_names) == 0:\n        return [\"N/A Connected\"]\n    else:\n        return connected_instrument_names\n\n\n# The following function connects and configure the scientific instrument\n# returns the handler of this instrument as to use for start measuring voltage or current\ndef Instrument_Connection(instrument_name,  # Name Type and Port of Instrument\n                          measure_operation,  # \"Measure Voltage\" or \"Measure Current\"\n                          # ------------ for \"Measure Current\" Arguments\n                          apply_voltage_range,  # in Volts\n                          apply_compliance_current,  # in Amps\n                          measure_current_nplc,  # Number of power line cycles (NPLC) from 0.01 to 10\n                          measure_current,  # in Amps; Upper limit of current in Amps, from -1.05 A to 1.05 A\n                          measure_current_auto_range,  # Enables auto_range if True, else uses the set resistance\n                          # ------------ for \"Measure Current\" Arguments\n                          apply_current_range,  # A current_range value or None\n                          apply_compliance_voltage,  # A float in the correct range for a compliance_voltage\n                          measure_voltage_nplc,  # Number of power line cycles (NPLC) from 0.01 to 10\n                          measure_voltage,  # Upper limit of voltage in Volts, from -210 V to 210 V\n                          measure_voltage_auto_range  # Enables auto_range if True, else uses the set voltage\n                          ):\n    sourcemeter = Keithley2400(instrument_name)\n    sourcemeter.reset()\n    sourcemeter.use_front_terminals()\n    if measure_operation == \"Measure Current\":\n        sourcemeter.apply_voltage(voltage_range=apply_voltage_range, compliance_current=apply_compliance_current)\n        sourcemeter.measure_current(nplc=measure_current_nplc, current=measure_current,\n                                    auto_range=measure_current_auto_range)\n    if measure_operation == \"Measure Voltage\":\n        sourcemeter.apply_current(current_range=apply_current_range, compliance_voltage=apply_compliance_voltage)\n        sourcemeter.measure_voltage(nplc=measure_voltage_nplc, voltage=measure_voltage,\n                                    auto_range=measure_voltage_auto_range)\n    print(sourcemeter)\n    sleep(0.1)  # wait here to give the instrument time to react\n    return sourcemeter\n\n\n# ------------------- we have a Global value(dict): instruments_setup_values which contains the setup values\n# ------------------- When you pass the instruments information from the UI to the BackEnd\n# ------------------- the 1st object of this list is the instruments_setup_values\ndef Setup_Values(instruments_info):\n    instruments_setup_values = instruments_info[0]\n    print(\"Setup Values .........\")\n    print(instruments_setup_values)\n    return instruments_setup_values\n\n\ndef Print_Instruments_info(instruments_info):\n    for instrument in instruments_info:\n        print(\"Instruments .........\")\n        print(instrument)\n\n\ndef Setup_Instruments(instruments_setup_values, instruments_info):\n    print(\"Setup Instruments .........\")\n    sourcemeters = []\n    # ------------------- Here we Setup the Sourcemeter Instruments AND their process via the input data we will apply\n    for instrument in instruments_info:\n        print(\"Instrument ID: \", instrument[\"Instrument\"], \"- Port Number\", instrument[\"Port Number\"])\n        instrument_optionmenu = instrument['OptionMenu']\n        applied_values = []  # the values which will be applied\n        measure_operation = None  # measure type are \"Measure Voltage\" or \"Measure Current\"\n        # \"Measure Current\" corresponds to \"Apply Incremental Voltage\" & \"Apply Steady Voltage\"\n        # \"Measure Voltage\" corresponds to \"Apply Incremental Current\" & \"Apply Steady Current\"\n        if instrument_optionmenu == 'Apply Incremental Voltage':\n            measure_operation = \"Measure Current\"\n            applied_values = np.linspace(start=int(instrument['Min Voltage (Volts)']),\n                                         stop=int(instrument['Max Voltage (Volts)']),\n                                         num=int(instrument['Measurement Number']))\n        if instrument_optionmenu == 'Apply Steady Voltage':\n            measure_operation = \"Measure Current\"\n            applied_values = np.linspace(start=int(instrument['Steady Voltage (Volts)']),\n                                         stop=int(instrument['Steady Voltage (Volts)']),\n                                         num=int(instrument['Measurement Number']))\n        if instrument_optionmenu == 'Apply Incremental Current':\n            measure_operation = \"Measure Voltage\"\n            applied_values = np.linspace(start=float(instrument['Min Current (Amps)']),\n                                         stop=float(instrument['Max Current (Amps)']),\n                                         num=int(instrument['Measurement Number']))\n        if instrument_optionmenu == 'Apply Steady Current':\n            measure_operation = \"Measure Voltage\"\n            applied_values = np.linspace(start=float(instrument['Steady Current (Amps)']),\n                                         stop=float(instrument['Steady Current (Amps)']),\n                                         num=int(instrument['Measurement Number']))\n        print(\"Measure Option:\", measure_operation)\n        print(\"Applied Values:\", applied_values)\n        sourcemeter = Instrument_Connection(instrument_name=instrument['Port Number'],\n                                            measure_operation=measure_operation,\n                                            # ------------ for \"Measure Current\" Arguments\n                                            apply_voltage_range=None if instruments_setup_values[\n                                                                            \"Voltage Range [Measure Current]\"] == 'None' else float(\n                                                instruments_setup_values[\"Voltage Range [Measure Current]\"]),  # =None,\n                                            apply_compliance_current=float(\n                                                instruments_setup_values[\"Compliance Current [Measure Current]\"]),\n                                            # =10e-4,\n                                            measure_current_nplc=int(\n                                                instruments_setup_values[\"Power Line Cycles [Measure Current]\"]),  # =1,\n                                            measure_current=float(\n                                                instruments_setup_values[\"Current Range [Measure Current]\"]),\n                                            # =0.000105,\n                                            measure_current_auto_range=bool(\n                                                instruments_setup_values[\"Auto Range [Measure Current]\"]),  # =True\n                                            # ------------ for \"Measure Current\" Arguments\n                                            apply_current_range=None if instruments_setup_values[\n                                                                            \"Current Range [Measure Voltage]\"] == 'None' else float(\n                                                instruments_setup_values[\"Current Range [Measure Voltage]\"]),  # =None,\n                                            apply_compliance_voltage=float(\n                                                instruments_setup_values[\"Compliance Voltage [Measure Voltage]\"]),\n                                            # 0.1,\n                                            measure_voltage_nplc=int(\n                                                instruments_setup_values[\"Power Line Cycles [Measure Voltage]\"]),  # =1,\n                                            measure_voltage=float(\n                                                instruments_setup_values[\"Voltage Range [Measure Voltage]\"]),  # 21.0,\n                                            measure_voltage_auto_range=bool(\n                                                instruments_setup_values[\"Auto Range [Measure Voltage]\"]))  # True)\n        sourcemeters.append((instrument[\"Port Number\"], sourcemeter, applied_values, measure_operation))\n    return sourcemeters\n\n\n# The following function apply a list of continuous voltages,\n# measure a list of continuous currents, and return this list of current\ndef Measure_Multi_Instruments(sourcemeters_info, time_step):\n    # the Argument sourcemeters_info is a list of lists: a 2-D list\n    # the outer list corresponds to the used Instruments, each item of the outer list refers to a sole Instrument object\n    # each Instrument object (inner list) contains the following items:\n    # item 0 => [Instrument][0]: Instrument ID,\n    # item 1 => [Instrument][1]: Keithley2400 sourcemeter connection reference/pointer\n    # item 2 => [Instrument][2]: list of input values of this Instrument,\n    # item 3 => [Instrument][3]: measure_operation, if the Instrument Apply Voltage and Measure Current or the opposite\n    instruments_num = len(sourcemeters_info)  # Number of used Instruments\n    # --------- Initiate\n    values_size = len(sourcemeters_info[0][2])\n    sourcemeters = []  # we create a list of the reference/pointer for each sourcemeter\n    applied_values = []  # we create a 2-D array; each row is the Instrument; each column is the parallel applied value\n    measured_values = []  # we create a 2-D array; each row is the Instrument; each column is the parallel measured value\n    measure_operations = []  # we create a list of the operations for each sourcemeter if measure Current or Voltage\n    for i in range(0, instruments_num):\n        sourcemeters.append(sourcemeters_info[i][1])\n        applied_values.append(sourcemeters_info[i][2])\n        measured_values.append(np.zeros(values_size))\n        measure_operations.append(sourcemeters_info[i][3])\n    applied_values = np.array(applied_values)\n    measured_values = np.array(measured_values)\n    # --------- Enable sourcemeters\n    for sourcemeter in sourcemeters:\n        sourcemeter.enable_source()\n    # --------- Measure\n    timestamps = []\n    time_init = datetime.now()\n    for i in range(0, values_size):\n        # --------- take timer\n        now = datetime.now()\n        time_difference = now - time_init\n        # print(time_difference, type(time_difference),str(time_difference)[2:])\n        timestamps.append(str(time_difference)[2:])\n        for j in range(0, instruments_num):  # Parallel\n            current_sourcemeter = sourcemeters[j]\n            current_measure_operation = measure_operations[j]\n            current_applied_value = applied_values[j, i]\n            if current_measure_operation == \"Measure Current\":\n                current_sourcemeter.source_voltage = current_applied_value\n                measured_values[j, i] = current_sourcemeter.current\n            elif current_measure_operation == \"Measure Voltage\":\n                current_sourcemeter.source_current = current_applied_value\n                measured_values[j, i] = current_sourcemeter.voltage\n        time.sleep(time_step)\n    # print(timestamps)\n    # --------- Disable sourcemeters\n    for sourcemeter in sourcemeters:\n        sourcemeter.disable_source()\n    # --------- Construct the results in tuples (applied values, measured values) for each instrument\n    my_results = []\n    for i in range(0, instruments_num):\n        my_results.append((list(applied_values[i]), list(measured_values[i])))\n        # print(\"------------Instrument:\", i+1)\n        # print(\" Applied Values:\", applied_values[i])\n        # print(\" Measured Values:\", measured_values[i])\n    return my_results, timestamps\n\n\ndef Start_Instruments_Parallel(sourcemeters, time_step):\n    if len(sourcemeters) >= 1:\n        print(\"Start Measure .........\")\n        return_values, timestamps = Measure_Multi_Instruments(sourcemeters, time_step)\n        return return_values, timestamps\n    else:\n        print(\"No Instruments are selected\")\n        return None\n\n\ndef Store_Data_Rows(result_values, instruments_info):\n    instruments_num = len(result_values)\n    result_values_and_info = []\n    for i in range(0, instruments_num):\n        curr_port_number = instruments_info[i]['Port Number']\n        curr_applied_values = result_values[i][0]\n        curr_measured_values = result_values[i][1]\n        print(\"----------------------\")\n        print(\"Instrument:\", curr_port_number, \"Applied Values:\",curr_applied_values, \"Measured Values:\", curr_measured_values)\n        curr_values_and_info = (curr_port_number, curr_applied_values, curr_measured_values)\n        result_values_and_info.append(curr_values_and_info)\n    # print(result_values_and_info)\n    # datetime object containing current date and time\n    now = datetime.now()\n    pd.DataFrame(result_values_and_info).to_csv(\"data/Results-\"+ str(now.strftime(\"%d-%m-%Y-%H:%M:%S\")) + \".csv\")\n    print(\"...Saved\")\n\ndef Create_SCV_Columns(instruments_info):\n    csv_columns = ['Time (min)']\n    for instrument in instruments_info:\n        instrument_port = instrument['Port Number']\n        if instrument[\"OptionMenu\"] == \"Apply Steady Voltage\":\n            csv_columns.append(instrument_port + ' Voltage Set')\n            csv_columns.append(instrument_port + ' Current Measure')\n        if instrument[\"OptionMenu\"] == \"Apply Incremental Voltage\":\n            csv_columns.append(instrument_port + ' Voltage Set')\n            csv_columns.append(instrument_port + ' Current Measure')\n        if instrument[\"OptionMenu\"] == \"Apply Steady Current\":\n            csv_columns.append(instrument_port + ' Current Set')\n            csv_columns.append(instrument_port + ' Voltage Measure')\n        if instrument[\"OptionMenu\"] == \"Apply Incremental Current\":\n            csv_columns.append(instrument_port + ' Current Set')\n            csv_columns.append(instrument_port + ' Voltage Measure')\n    #print(csv_columns)\n    return csv_columns\n\ndef Store_Data(result_values, instruments_info, time_step, timestamps):\n    # result_values shape: Instrument X Applied-or-Measured X Measurement\n    result_values = np.array(result_values)\n    print(\"Results Shape:\",result_values.shape)\n    instruments_num = len(result_values)\n    print(\"Instruments Num:\", instruments_num)\n    measurements_num = len(result_values[0][0])\n    print(\"Measurements Num:\",measurements_num)\n    final_result_values = [[0]*(2*instruments_num+1)]*measurements_num\n    final_result_values = np.float64(final_result_values)\n    #-------------- First column is the time starting with Zero and increses with time_step\n    for t in range(0,measurements_num):\n        time_value_string = timestamps[t] # '00:00.000017'\n        min_time_value = float(time_value_string[0:2])\n        sec_min_time_value = float(time_value_string[3:])\n        # print(time_value_string)\n        # print(\"min:\",min_time_value,\"sec:\",sec_min_time_value)\n        final_result_values[t,0] = min_time_value + sec_min_time_value/60\n    #-------------- Reshape Data\n    final_result_values_column_counter = 1\n    for i in range(0, instruments_num):\n        for j in range(0, 2):\n            for k in range(0,measurements_num):\n                final_result_values[k,final_result_values_column_counter] = result_values[i,j,k]\n                # print(k,final_result_values_column_counter,\"<--\",i,j,k, \"Values:\", result_values[i,j,k])\n            final_result_values_column_counter +=1\n    final_result_columns = Create_SCV_Columns(instruments_info)\n    now = datetime.now()\n    df = pd.DataFrame(final_result_values, columns=final_result_columns)\n    df.to_csv(\"data/Results-\"+ str(now.strftime(\"%d-%m-%Y-%H:%M:%S\")) + \".csv\")\n    print(\"...Saved\")\n\n# CHecks if the Measurement Number is the same to all instruments (it's parralel process)\n# And selects the minimum number\ndef Correct_Measurements_Number(instruments_info):\n    instruments_num = len(instruments_info)\n    measurement_size = int(instruments_info[0]['Measurement Number'])\n    for i in range(0, instruments_num):\n        if measurement_size <  int(instruments_info[i]['Measurement Number']):\n            instruments_info[i]['Measurement Number'] = str(measurement_size)\n    return instruments_info\n\ndef Task_0_array(instruments_info):\n    time_step = 0.25\n    instruments_setup_values = Setup_Values(instruments_info)\n    instruments_info.pop(0)  # ------------------- remove the 1st element which contains the instruments_setup_values\n    instruments_info = Correct_Measurements_Number(instruments_info) # selects the minimum number of measurements\n    Print_Instruments_info(instruments_info)\n    # ------------------- Here we Setup the instruments and ready execution\n    sourcemeters = Setup_Instruments(instruments_setup_values, instruments_info)\n    # print(\"Sourcemeter:\",sourcemeters)\n    # ------------------- Here we Start the measurements in parallel execution\n    # return_values = Start_Instruments_Sequential(sourcemeters)\n    return_values, timestamps = Start_Instruments_Parallel(sourcemeters, time_step) # is a list of tuples (applied_values, measured_values)\n    # print(\"Returned Values:\",return_values)\n    Store_Data(return_values, instruments_info, time_step, timestamps)\n\n    print(\"-----------\\n\")\n    return \"GOOD!\"\n\n\ndef change_appearance_mode_event(new_appearance_mode: str):\n    customtkinter.set_appearance_mode(new_appearance_mode)\n\n\ndef MouseWheelHandler(event):\n    global count\n\n    def delta(event):\n        if event.num == 5 or event.delta < 0:\n            return -1\n        return 1\n\n    count += delta(event)\n    print(count)\n\n\ndef Sub_Plot(axis, subplot_x, sublplot_y, x_data, y_data, plot_title, plot_x_label, plot_y_label):\n    axis[subplot_x, sublplot_y].plot(x_data, y_data)\n    axis[subplot_x, sublplot_y].set_title(plot_title)\n    axis[subplot_x, sublplot_y].set_xlabel(plot_x_label)\n    axis[subplot_x, sublplot_y].set_ylabel(plot_y_label)\n\n\ndef graph(data_path):\n    print(\"Data Path for Plotting:\",data_path)\n    df = pd.read_csv(data_path)\n    df_column_names = list(df.columns)[1:]\n    columns_num = len(df_column_names)\n    instruments_num = int((len(df_column_names) - 1) / 2)\n    print(df_column_names)\n    print(\"Number of columns:\", columns_num)\n    print(\"Number of instruments:\", instruments_num)\n    fig, axs = plt.subplots(instruments_num, 3)\n    column_pointer = 1\n    column_border = 0\n    for i in range(0, instruments_num):\n        Sub_Plot(axis=axs,\n                 subplot_x=2,\n                 sublplot_y=i,\n                 x_data=df[df_column_names[column_pointer]].values,\n                 y_data=df[df_column_names[column_pointer + 1]].values,\n                 plot_title=df_column_names[column_pointer][0:7],\n                 plot_x_label=df_column_names[column_pointer][7:],\n                 plot_y_label=df_column_names[column_pointer + 1][7:])\n        Sub_Plot(axis=axs,\n                 subplot_x=1,\n                 sublplot_y=i,\n                 x_data=df[df_column_names[0]].values,\n                 y_data=df[df_column_names[column_pointer + 1]].values,\n                 plot_title=df_column_names[column_pointer][0:7],\n                 plot_x_label=df_column_names[0],\n                 plot_y_label=df_column_names[column_pointer + 1][7:])\n        Sub_Plot(axis=axs,\n                 subplot_x=0,\n                 sublplot_y=i,\n                 x_data=df[df_column_names[0]].values,\n                 y_data=df[df_column_names[column_pointer]].values,\n                 plot_title=df_column_names[column_pointer][0:7],\n                 plot_x_label=df_column_names[0],\n                 plot_y_label=df_column_names[column_pointer][7:])\n        rect = plt.Rectangle(\n            # (lower-left corner), width, height\n            (0.01 + column_border, 0.01), 0.30, 0.97, fill=False, color=\"k\", lw=1,\n            zorder=1000, transform=fig.transFigure, figure=fig\n        )\n        fig.patches.extend([rect])\n        column_border += 0.334\n        column_pointer += 2\n    fig.tight_layout()\n    plt.show()\n\n\nclass App(customtkinter.CTk):\n    def __init__(self):\n        super().__init__()\n        self.instruments_search = \"N/A\"\n        self.instruments_setup_values = {\n            # ------------ for \"Measure Current\" Arguments\n            \"Voltage Range [Measure Current]\": \"None\",  # value (in Volts) or None\n            \"Compliance Current [Measure Current]\": \"1011E-4\",\n            # A floating point property that controls the compliance current in Amps\n            \"Power Line Cycles [Measure Current]\": \"1\",  # Number of power line cycles (NPLC) from 0.01 to 10\n            \"Current Range [Measure Current]\": \"0.000105\",  # in Amps; Upper limit of current in Amps, from -1.05 A\n            \"Auto Range [Measure Current]\": \"True\",  # Enables auto_range if True, else uses the set resistance\n            # ------------ for \"Measure Voltage\" Arguments\n            \"Current Range [Measure Voltage]\": \"None\",\n            \"Compliance Voltage [Measure Voltage]\": \"0.1\",\n            \"Power Line Cycles [Measure Voltage]\": \"1\",\n            \"Voltage Range [Measure Voltage]\": \"21.0\",\n            \"Auto Range [Measure Voltage]\": \"True\"\n        }\n        self.init_sidebar_value = \"1\"  # <--- The initial State (default Instrument Number displayed)\n        self.repetition_num = \"1\"\n        self.group_frame = None\n        self.entry_button = None\n        self.single_frame_form = None\n        self.single_frame_option_menu = None\n        self.single_frame_mode = None\n        self.single_frame_title_text = None\n        self.single_frame_title = None\n        self.single_frame_title_val = None\n        self.single_frame_label = None\n        self.single_frame_data = None\n        self.single_frame = None\n        self.single_frame_entry = None\n        self.filename = 'data/Results-06-04-2023-11:37:00.csv'\n        self.anim = None\n        self.line = None\n\n        # -----------------------------------------------------Window---------------------------------------------------\n        # configure window\n        self.title(\"Instruments Operation Control\")\n        self.geometry(f\"{1250}x{1150}\")  # {width}x{height}\n        self.grid_columnconfigure(1, weight=1)\n        self.grid_rowconfigure(1, weight=1)\n        # --------------------------------------------------Side Bar----------------------------------------------------\n        # Create sidebar Frame with widgets\n        self.sidebar_frame = customtkinter.CTkFrame(self, width=100, corner_radius=0)\n        self.sidebar_frame.grid(row=0, column=0, rowspan=5, columnspan=1, sticky=\"nsew\")\n        self.sidebar_frame.grid_rowconfigure(4, weight=1)\n        # Side Bar --> Title\n        self.sidebar_title_label = customtkinter.CTkLabel(master=self.sidebar_frame, text=\"Operation Panel\",\n                                                          font=(\"Calibre\", 16), anchor=\"nw\")\n        self.sidebar_title_label.grid(row=0, column=0, padx=20, pady=(10, 10))\n\n        # Side Bar Frame --> Search Instruments ------------------------------------------------------------------------\n        self.sidebar_instruments_search_frame = customtkinter.CTkFrame(master=self.sidebar_frame)\n        self.sidebar_instruments_search_frame.grid(row=1, column=0, sticky=\"nsew\", pady=(10, 10))\n        # ------------- Side Bar > Search Instruments Frame ---> Label Title\n        self.sidebar_search_instruments_label = customtkinter.CTkLabel(master=self.sidebar_instruments_search_frame,\n                                                                       text=\"Available Instruments\",\n                                                                       anchor=\"w\")\n        self.sidebar_search_instruments_label.grid(row=0, column=0, padx=10, pady=(10, 0))\n        # ------------- Side Bar > Search Instruments Frame ---> Button\n        self.sidebar_search_instruments_button = customtkinter.CTkButton(self.sidebar_instruments_search_frame,\n                                                                         width=70,\n                                                                         command=self.search_instrument_event,\n                                                                         text=\"Search\")\n        self.sidebar_search_instruments_button.grid(row=0, column=1, padx=1, pady=(10, 0))\n        # ------------- Side Bar > Search Instruments Frame ---> Label Value\n        self.sidebar_search_instruments_label_value = customtkinter.CTkLabel(self.sidebar_instruments_search_frame,\n                                                                             text=self.instruments_search,\n                                                                             anchor=\"nw\")\n        self.sidebar_search_instruments_label_value.grid(row=1, column=0, padx=20, pady=(10, 0))\n\n        # Side Bar Frame --> Select Instruments ------------------------------------------------------------------------\n        self.sidebar_instruments_select_frame = customtkinter.CTkFrame(master=self.sidebar_frame)\n        self.sidebar_instruments_select_frame.grid(row=2, column=0, sticky=\"nsew\")\n        # ------------- Side Bar > Select Instruments Frame ---> Label Title\n        self.sidebar_option_menu_label = customtkinter.CTkLabel(self.sidebar_instruments_select_frame,\n                                                                text=\"Select the Number of Instruments \\n you want to \"\n                                                                     \"operate\",\n                                                                anchor=\"w\")\n        self.sidebar_option_menu_label.grid(row=0, column=0, padx=20, pady=(10, 0))\n        # ------------- Side Bar > Select Instruments Frame ---> Option Menu\n        gpib_option_menu_values = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]\n        self.sidebar_option_menu = customtkinter.CTkOptionMenu(self.sidebar_instruments_select_frame,\n                                                               values=gpib_option_menu_values,\n                                                               command=self.sidebar_option_menu_event)\n        self.sidebar_option_menu.grid(row=1, column=0, padx=20, pady=(10, 10))\n        self.sidebar_option_menu.set(self.init_sidebar_value)\n\n        # Side Bar --> Appearance Mode (Extra Options)\n        self.appearance_mode_label = customtkinter.CTkLabel(self.sidebar_frame, text=\"Appearance Mode:\", anchor=\"w\")\n        self.appearance_mode_label.grid(row=7, column=0, padx=20, pady=(10, 0))\n        self.appearance_mode_option_menu = customtkinter.CTkOptionMenu(self.sidebar_frame,\n                                                                       values=[\"Light\", \"Dark\", \"System\"],\n                                                                       command=change_appearance_mode_event)\n        self.appearance_mode_option_menu.grid(row=8, column=0, padx=20, pady=(10, 10))\n        self.appearance_mode_option_menu.set(\"Dark\")\n        # Side Bar --> Window Scale (Extra Options)\n        self.scaling_label = customtkinter.CTkLabel(self.sidebar_frame, text=\"UI Scaling:\", anchor=\"w\")\n        self.scaling_label.grid(row=9, column=0, padx=20, pady=(10, 0))\n        self.scaling_option_menu = customtkinter.CTkOptionMenu(self.sidebar_frame,\n                                                               values=[\"80%\", \"90%\", \"100%\", \"110%\", \"120%\", \"130%\"],\n                                                               command=self.change_scaling_event)\n        self.scaling_option_menu.set(\"100%\")\n        self.scaling_option_menu.grid(row=10, column=0, padx=20, pady=(10, 20))\n\n        # --------------------------------------- Top Widget - Main Frame ----------------------------------------------\n        # Create the Top Main Frame\n        self.top_main_frame = customtkinter.CTkFrame(self, height=250, width=700, corner_radius=0)\n        self.top_main_frame.grid(row=0, column=1, padx=(20, 20), pady=(20, 0), sticky=\"W\")\n        # Top Frame --> Labels Will be updated\n        # Top Widget --> Instrument status ---------------------------------------------------------------\n        self.status_label_frame = customtkinter.CTkFrame(self.top_main_frame, corner_radius=0)\n        self.status_label_frame.grid(row=0, column=0, padx=(5, 20), pady=(20, 10), sticky=\"W\")\n\n        self.status_label_title = customtkinter.CTkLabel(self.status_label_frame,\n                                                         text=\"Number of Instruments Selected:\",\n                                                         font=(\"Calibre\", 18))\n        self.status_label_title.grid(row=0, column=0, padx=5, pady=(10, 0), sticky=\"W\")\n        self.status_label_value = customtkinter.CTkLabel(self.status_label_frame, text=self.init_sidebar_value,\n                                                         width=40,\n                                                         corner_radius=5,\n                                                         font=(\"Calibre\", 18),\n                                                         fg_color=\"#1F6AA5\")\n        self.status_label_value.grid(row=0, column=1, padx=(0, 20), pady=(10, 0), sticky=\"W\")\n        # Top Widget --> Default Values ---------------------------------------------------------------\n        self.top_main_instrumentation = customtkinter.CTkFrame(self.top_main_frame,\n                                                               # width=90,\n                                                               fg_color=\"#333333\",\n                                                               corner_radius=10)\n        self.top_main_instrumentation.grid(row=3, column=0, padx=(5, 5), pady=(5, 10), sticky=\"S\")\n\n        self.top_main_label_title = customtkinter.CTkLabel(self.top_main_instrumentation,\n                                                           text=\"Insert Instrument's Setup Values:\")\n        self.top_main_label_title.grid(row=0, column=0, sticky=tkinter.W, pady=2, padx=(5, 5))\n\n        curr_row_counter = 1\n        self.instruments_tk_setup_values = []\n        for curr_label, curr_entry in self.instruments_setup_values.items():\n            self.top_main_label_inst = customtkinter.CTkLabel(self.top_main_instrumentation, text=curr_label)\n            self.top_main_label_inst.grid(row=curr_row_counter, column=0, sticky=tkinter.W, pady=2, padx=(5, 5))\n            self.top_main_entry_inst = customtkinter.CTkEntry(self.top_main_instrumentation,\n                                                              corner_radius=0,\n                                                              width=300)\n            self.top_main_entry_inst.delete(0)\n            self.top_main_entry_inst.insert(0, curr_entry)\n            self.top_main_entry_inst.grid(row=curr_row_counter, column=1, pady=2, padx=(5, 5))\n            self.instruments_tk_setup_values.append((self.top_main_label_inst, self.top_main_entry_inst))\n            curr_row_counter = curr_row_counter + 1\n\n        # --------------------------------------- Core Widget - Main Frame ---------------------------------------------\n        # Create the Core Main Frame with widgets\n        self.main_frame = customtkinter.CTkScrollableFrame(self, height=400, width=700, corner_radius=0)\n        self.main_frame.grid(row=1, column=1, padx=(20, 20), pady=(20, 0), sticky=\"W\")\n        # Main Frame --> Generate Individual Frame Data for each GPIB\n        # \"group_data\" refer to all the data which will be completed and will be sent to the GPIBs\n        # \"group_data_tk\" refer to all the tk data relevant to the group_data which operate the UI\n        self.group_data = []  # 3D-Array (1st: the individual frame; 2nd: the label; 3rd: the entry)\n        self.group_data_tk = []\n        self.generate_group_frame()\n\n        # --------------------------------------------------Right Side Bar----------------------------------------------\n        # Create RIGHT sidebar Frame with widgets\n        self.right_sidebar_frame = customtkinter.CTkFrame(self, height=300, width=120, corner_radius=0)\n        self.right_sidebar_frame.grid(row=0, column=2, sticky=\"NW\")\n        # Side Bar --> Title\n        self.right_sidebar_title_label = customtkinter.CTkLabel(master=self.right_sidebar_frame, text=\"Plots Panel\",\n                                                                font=(\"Calibre\", 16), anchor=\"n\")\n        self.right_sidebar_title_label.grid(row=0, column=0, padx=20, pady=(10, 10))\n\n        self.plot_file_button = customtkinter.CTkButton(master=self.right_sidebar_frame,\n                                                        text='Open a File',\n                                                        command=self.select_file)\n        self.plot_file_button.grid(row=1, column=0, pady=10, padx=20, sticky=\"w\")\n        self.plot_file_name_title = customtkinter.CTkLabel(master=self.right_sidebar_frame, text=\"File Selected:\",\n                                                           font=(\"Calibre\", 15))\n        self.plot_file_name_title.grid(row=2, column=0, padx=(5,0), pady=(10, 0), sticky=\"w\")\n        self.plot_file_name_label = customtkinter.CTkLabel(master=self.right_sidebar_frame, font=(\"Calibre\", 12),\n                                                           text=\"No File Selected\")\n        self.plot_file_name_label.grid(row=3, column=0, padx=(5,0), pady=(0,10), sticky=\"w\")\n        self.plot_button = customtkinter.CTkButton(master=self.right_sidebar_frame,\n                                                   command= lambda: graph(self.filename),\n                                                   text=\"Show Graph\")\n        self.plot_button.grid(row=4, column=0, pady=10, padx=20, sticky=\"w\")\n\n\n\n    # ----------------------------------This Generates the GPIB Group Frames--------------------------------------------\n    def generate_group_frame(self):\n        # Group Frame which includes GPIBs\n        self.group_frame = customtkinter.CTkFrame(self.main_frame, width=120, corner_radius=0)\n        self.group_frame.grid(row=2, column=2, padx=(20, 20), pady=(20, 20), sticky=\"W\", columnspan=2)\n        self.group_frame.grid_rowconfigure(1, weight=1)\n        self.group_data_tk = []\n        if len(self.group_data) == 0:  # <----- the initial state\n            self.sidebar_option_menu_event(self.status_label_value.cget(\"text\"))\n        else:\n            for i in range(0, int(self.status_label_value.cget(\"text\"))):\n                # Single Frame\n                self.single_frame = customtkinter.CTkFrame(self.group_frame, width=190)\n                self.single_frame.grid(row=i + 1, column=0, padx=(5, 5), pady=(5, 10), sticky=\"W\")\n                self.single_frame_data = self.group_data[i]\n                self.group_data_tk.append(self.generate_single_frame)\n\n        self.measure_button_frame = customtkinter.CTkFrame(self.group_frame)\n        self.measure_button_frame.grid(row=1, column=1, padx=(20, 5), pady=(0, 5))\n\n        self.entry_button = customtkinter.CTkButton(master=self.measure_button_frame, command=self.measure_event,\n                                                    text=\"Start Measurement\")\n        self.entry_button.grid(row=0, column=0, pady=10, padx=20, sticky=\"n\")\n        self.entry_button_label = customtkinter.CTkLabel(self.measure_button_frame, font=(\"Calibre\", 12),\n                                                         text=\"Number of Repetitions\")\n        self.entry_button_label.grid(row=1, column=0, pady=0, padx=20, sticky=\"W\")\n\n        self.entry_button_entry = customtkinter.CTkEntry(self.measure_button_frame,\n                                                         corner_radius=0,\n                                                         width=50)\n        self.entry_button_entry.delete(0)\n        self.entry_button_entry.insert(0, self.repetition_num)\n        self.entry_button_entry.grid(row=1, column=2, pady=0, padx=5, sticky=\"W\")\n\n    # ----------------------------------This Generates the GPIB Group Frames--------------------------------------------\n    @property\n    def generate_single_frame(self):\n        single_frame_tuple = []\n        # Generate Single Form --> Head\n        self.single_frame_title = customtkinter.CTkFrame(self.single_frame)\n        self.single_frame_title.grid(row=0, column=0, padx=(5, 5), pady=(5, 5))\n        self.single_frame_title_text = customtkinter.CTkLabel(self.single_frame_title, font=(\"Calibre\", 16),\n                                                              text=\"Instrument \")\n        self.single_frame_title_text.grid(row=0, column=0, padx=(5, 1))\n        self.single_frame_title_val = customtkinter.CTkLabel(self.single_frame_title, font=(\"Calibre\", 16),\n                                                             text=self.single_frame_data.get(\"Instrument\"))\n        self.single_frame_title_val.grid(row=0, column=1, padx=(1, 5))\n        single_frame_tuple.append((\"Instrument\", self.single_frame_title_val))\n\n        # Generate Single Form --> Option Menu\n        self.single_frame_mode = customtkinter.CTkFrame(self.single_frame, width=120)\n        self.single_frame_mode.grid(row=1, column=0, padx=(5, 5), pady=(0, 5))\n        single_frame_mode_values = [\"Apply Incremental Voltage\",\n                                    \"Apply Steady Voltage\",\n                                    \"Apply Incremental Current\",\n                                    \"Apply Steady Current\"\n                                    ]\n        self.single_frame_option_menu = customtkinter.CTkOptionMenu(self.single_frame_mode,\n                                                                    values=single_frame_mode_values,\n                                                                    command=self.single_frame_mode_event)\n        self.single_frame_option_menu.set(self.single_frame_data.get(\"OptionMenu\"))\n        self.single_frame_option_menu.grid(row=0, column=0, padx=20, pady=(5, 5))\n        single_frame_tuple.append((\"OptionMenu\", self.single_frame_option_menu))\n        # Generate the Single Form --> Labels & Entries\n        # Form Line \"row_counter\" --> Label Will be updated (\"row_counter\")\n        self.single_frame_form = customtkinter.CTkFrame(self.single_frame, width=120, corner_radius=0)\n        self.single_frame_form.grid(row=2, column=0)\n        row_counter = 0\n        for label, entry in self.single_frame_data.items():\n            if label != \"Instrument\" and label != \"OptionMenu\":\n                self.single_frame_label = customtkinter.CTkLabel(self.single_frame_form, text=label)\n                self.single_frame_label.grid(row=row_counter, column=0, sticky=tkinter.W, pady=2, padx=(5, 5))\n                self.single_frame_entry = customtkinter.CTkEntry(self.single_frame_form,\n                                                                 corner_radius=0,\n                                                                 width=150)\n                self.single_frame_entry.delete(0)\n                self.single_frame_entry.insert(0, entry)\n                self.single_frame_entry.grid(row=row_counter, column=1, pady=2, padx=(5, 5))\n                single_frame_tuple.append((self.single_frame_label, self.single_frame_entry))\n                row_counter += 1\n        return single_frame_tuple\n\n    # ------------------------------- This Updates the Number of GPIB Frames--------------------------------------------\n    def sidebar_option_menu_event(self, new_appearance_mode: str):\n        self.status_label_value.configure(text=new_appearance_mode)\n        print(\"Status:\", self.status_label_value.cget(\"text\"))\n        # ---------------- Generate frames relative to the inserted GPIB number\n        self.group_data = []\n        for i in range(0, int(self.status_label_value.cget(\"text\"))):\n            self.group_data.append({\n                \"Instrument\": str(i + 1),\n                \"OptionMenu\": \"Apply Incremental Voltage\",\n                \"Port Number\": \"GPIB::\" + str(i),\n                \"Measurement Number\": str(10 + i),\n                \"Min Voltage (Volts)\": str(i),\n                \"Max Voltage (Volts)\": str(i + 10)\n            })\n        self.group_frame.destroy()\n        self.generate_group_frame()\n\n    # ------------------------------- This Updates the Single GPIB Operation--------------------------------------------\n    def single_frame_mode_event(self, single_frame_mode: str):\n        # -------------------------------------------------------------------------------------------------------------------------\n        updated_group_data = []\n        # ---------- Generate the new data based on the Intput from TK\n        for single_group_data_tk in self.group_data_tk:\n            single_group_data = dict(Instrument=single_group_data_tk[0][1].cget(\"text\"),\n                                     OptionMenu=single_group_data_tk[1][1].get())\n            for i in range(2, len(single_group_data_tk)):\n                single_group_data[str(single_group_data_tk[i][0].cget(\"text\"))] = str(single_group_data_tk[i][1].get())\n            updated_group_data.append(single_group_data)\n\n        new_group_data = []\n        for i in range(len(self.group_data)):\n            print(\"Instrument: \", i + 1)\n            previous_single_data = self.group_data[i]\n            updated_single_data = updated_group_data[i]\n            if previous_single_data[\"OptionMenu\"] != updated_single_data[\"OptionMenu\"]:\n                print(\"CHANGED\")\n                if updated_single_data[\"OptionMenu\"] == \"Apply Steady Voltage\":\n                    new_single_group_data = {\n                        \"Instrument\": previous_single_data[\"Instrument\"],\n                        \"OptionMenu\": updated_single_data[\"OptionMenu\"],\n                        \"Port Number\": updated_single_data[\"Port Number\"],\n                        \"Measurement Number\": updated_single_data[\"Measurement Number\"],\n                        \"Steady Voltage (Volts)\": str(10),\n                    }\n                if updated_single_data[\"OptionMenu\"] == \"Apply Incremental Voltage\":\n                    new_single_group_data = {\n                        \"Instrument\": previous_single_data[\"Instrument\"],\n                        \"OptionMenu\": updated_single_data[\"OptionMenu\"],\n                        \"Port Number\": updated_single_data[\"Port Number\"],\n                        \"Measurement Number\": updated_single_data[\"MMeasurement Number\"],\n                        \"Min Voltage (Volts)\": str(1),\n                        \"Max Voltage (Volts)\": str(10)\n                    }\n                if updated_single_data[\"OptionMenu\"] == \"Apply Steady Current\":\n                    new_single_group_data = {\n                        \"Instrument\": previous_single_data[\"Instrument\"],\n                        \"OptionMenu\": updated_single_data[\"OptionMenu\"],\n                        \"Port Number\": updated_single_data[\"Port Number\"],\n                        \"Measurement Number\": updated_single_data[\"Measurement Number\"],\n                        \"Steady Current (Amps)\": str(10),\n                    }\n                if updated_single_data[\"OptionMenu\"] == \"Apply Incremental Current\":\n                    new_single_group_data = {\n                        \"Instrument\": previous_single_data[\"Instrument\"],\n                        \"OptionMenu\": updated_single_data[\"OptionMenu\"],\n                        \"Port Number\": updated_single_data[\"Port Number\"],\n                        \"Measurement Number\": updated_single_data[\"Measurement Number\"],\n                        \"Min Current (Amps)\": str(1),\n                        \"Max Current (Amps)\": str(10)\n                    }\n                new_group_data.append(new_single_group_data)\n            else:  # <-------- if there is no change at the OptionMenu we keep it the same (previous)\n                new_group_data.append(previous_single_data)\n\n            # print(\"Before:\", previous_single_data)\n            print(\"   New:\", new_group_data)\n        self.group_data = new_group_data\n        # -------------------------------------------------------------------------------------------------------------------------\n        self.group_frame.destroy()\n        self.generate_group_frame()\n\n    def update_instruments_setup_values_event(self):\n        # ---------- Take the new Instrument data from Top Main Frame from TK\n        updated_instruments_setup_values = {}\n        for single_setup_value in self.instruments_tk_setup_values:\n            single_setup_value_label = single_setup_value[0].cget(\"text\")\n            single_setup_value_value = single_setup_value[1].get()\n            # print(single_setup_value_label,single_setup_value_value)\n            updated_instruments_setup_values[single_setup_value_label] = single_setup_value_value\n        return updated_instruments_setup_values\n\n    def update_instruments_functional_values_event(self):\n        updated_group_data = []\n        # ---------- Generate the new data based on the Intput from TK\n        for single_group_data_tk in self.group_data_tk:\n            single_group_data = dict(Instrument=single_group_data_tk[0][1].cget(\"text\"),\n                                     OptionMenu=single_group_data_tk[1][1].get())\n            for i in range(2, len(single_group_data_tk)):\n                single_group_data[str(single_group_data_tk[i][0].cget(\"text\"))] = str(single_group_data_tk[i][1].get())\n            updated_group_data.append(single_group_data)\n        return updated_group_data\n\n    def measure_event(self):\n        self.repetition_num = self.entry_button_entry.get()\n        # print(\"Repetition Number:\", self.repetition_num )\n        self.group_data = self.update_instruments_functional_values_event()\n        # print(self.group_data)\n\n\n        self.openNewWindow()\n        return None\n\n\n        self.instruments_setup_values = self.update_instruments_setup_values_event()\n        for rep in range(0, int(self.repetition_num)):\n            print(\"Repetition:\", rep + 1)\n            task_result = Task_0_array([self.instruments_setup_values] + self.group_data)\n            # <--- a list of dictionaries, each dictornery is an instrument\n            print(task_result)\n\n    def animate(self, i):\n        x = np.linspace(0, 2, 1000)\n        y = np.sin(2 * np.pi * (x - 0.01 * i))\n        self.line.set_data(x, y)\n        return self.line,\n\n    def openNewWindow(self):\n        print(\"test\")\n        # Toplevel object which will be treated as a new window\n        self.newWindow = customtkinter.CTkToplevel(self)\n        # sets the title of the\n        # Toplevel widget\n        self.newWindow.title(\"New Window\")\n        # sets the geometry of toplevel\n        self.newWindow.geometry(\"200x200\")\n        # A Label widget to show in toplevel\n        customtkinter.CTkLabel(master=self.newWindow, text=\"This is a new window\")\n\n        fig = plt.Figure(dpi=100)\n        ax = fig.add_subplot(xlim=(0, 2), ylim=(-1, 1))\n        self.line, = ax.plot([], [], lw=2)\n        canvas = FigureCanvasTkAgg(fig, master=self.newWindow)\n        canvas.get_tk_widget().pack(side=customtkinter.TOP, fill=customtkinter.BOTH, expand=1)\n\n        self.anim = animation.FuncAnimation(fig, self.animate, frames=1000, interval=100, blit=True)\n\n\n    def search_instrument_event(self):\n        get_connected_instuments = Get_Connected_Instruments()\n        delimiter_value = \"\\n\"  # initializing delimiter\n        res = ''\n        for ele in get_connected_instuments:  # using loop to add string followed by delim\n            res = res + str(ele) + delimiter_value\n        self.sidebar_search_instruments_label_value.configure(text=res)\n\n    def change_scaling_event(self, new_scaling: str):\n        new_scaling_float = int(new_scaling.replace(\"%\", \"\")) / 100\n        customtkinter.set_widget_scaling(new_scaling_float)\n\n    def select_file(self):\n        filetypes = (('text files', '*.csv'), ('All files', '*.*'))\n        self.filename = fd.askopenfilename(title='Open a file', filetypes=filetypes)\n        print(self.filename)\n        self.plot_file_name_label.configure(text=self.filename[-23:])\n\n\nif __name__ == \"__main__\":\n    app = App()\n    count = 0\n    app.bind(\"<MouseWheel>\", MouseWheelHandler)\n    app.bind(\"<Button-4>\", MouseWheelHandler)\n    app.bind(\"<Button-5>\", MouseWheelHandler)\n    app.mainloop()\n
===================================================================
diff --git a/v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots.py b/v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots.py
--- a/v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots.py	
+++ b/v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots.py	
@@ -764,7 +764,7 @@
 
 
         self.openNewWindow()
-        return None
+        #return None
 
 
         self.instruments_setup_values = self.update_instruments_setup_values_event()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"1dc989de-30fb-49b4-b044-9f2b3fe76070\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"PUSH_TAGS\">\n      <GitPushTagMode>\n        <option name=\"argument\" value=\"--tags\" />\n        <option name=\"title\" value=\"All\" />\n      </GitPushTagMode>\n    </option>\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"dev-branch\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2LYeTiUCCUKC4NQrNnfdT4HVeMe\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/jacobkritikos/Github/Source-Meter-PyMeasure&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;inlay.hints&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$\" />\n      <recent name=\"$PROJECT_DIR$/examples_plots\" />\n      <recent name=\"$PROJECT_DIR$/examples_custom_tkinter\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/multiprocessing_draft\" />\n      <recent name=\"$PROJECT_DIR$/examples_tkinter\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Python.v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots\">\n    <configuration name=\"new_Window\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Source-Meter-PyMeasure\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/examples_general\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/examples_general/new_Window.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"real_plot_3b_minimal_class(without_self)\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Source-Meter-PyMeasure\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/examples_plots\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/examples_plots/real_plot_3b_minimal_class(without_self).py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"real_plot_4_minimal_class_newWindow\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Source-Meter-PyMeasure\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/examples_plots\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/examples_plots/real_plot_4_minimal_class_newWindow.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"v11_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Source-Meter-PyMeasure\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/v11_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Source-Meter-PyMeasure\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots\" />\n        <item itemvalue=\"Python.v11_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots\" />\n        <item itemvalue=\"Python.real_plot_4_minimal_class_newWindow\" />\n        <item itemvalue=\"Python.real_plot_3b_minimal_class(without_self)\" />\n        <item itemvalue=\"Python.new_Window\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"1dc989de-30fb-49b4-b044-9f2b3fe76070\" name=\"Changes\" comment=\"\" />\n      <created>1676052452390</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1676052452390</updated>\n    </task>\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/v6_console_UI_dynamic_Dict_StringVar.py</url>\n          <line>76</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/v6_console_UI_dynamic_Dict_StringVar.py</url>\n          <line>67</line>\n          <option name=\"timeStamp\" value=\"2\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py</url>\n          <line>766</line>\n          <option name=\"timeStamp\" value=\"4\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py</url>\n          <line>760</line>\n          <option name=\"timeStamp\" value=\"5\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py</url>\n          <line>759</line>\n          <option name=\"timeStamp\" value=\"6\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py</url>\n          <line>774</line>\n          <option name=\"timeStamp\" value=\"7\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py</url>\n          <line>780</line>\n          <option name=\"timeStamp\" value=\"8\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,8 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="1dc989de-30fb-49b4-b044-9f2b3fe76070" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots.py" beforeDir="false" afterPath="$PROJECT_DIR$/v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py" beforeDir="false" afterPath="$PROJECT_DIR$/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -48,15 +48,16 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;/Users/jacobkritikos/Github/Source-Meter-PyMeasure&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;inlay.hints&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "dev-branch",
+    "last_opened_file_path": "/home/user/GitHub/Source-Meter-PyMeasure",
+    "settings.editor.selected.configurable": "inlay.hints"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="$PROJECT_DIR$" />
@@ -68,8 +69,8 @@
       <recent name="$PROJECT_DIR$/examples_tkinter" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots">
-    <configuration name="new_Window" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+  <component name="RunManager" selected="Python.v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class">
+    <configuration name="real_plot_3b_minimal_class(without_self)" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="Source-Meter-PyMeasure" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
@@ -77,11 +78,11 @@
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
       <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/examples_general" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/examples_plots" />
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/examples_general/new_Window.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/examples_plots/real_plot_3b_minimal_class(without_self).py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -90,7 +91,7 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="real_plot_3b_minimal_class(without_self)" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+    <configuration name="real_plot_4_minimal_class_newWindow" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="Source-Meter-PyMeasure" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
@@ -102,7 +103,7 @@
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/examples_plots/real_plot_3b_minimal_class(without_self).py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/examples_plots/real_plot_4_minimal_class_newWindow.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -111,7 +112,7 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="real_plot_4_minimal_class_newWindow" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+    <configuration name="v11_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="Source-Meter-PyMeasure" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
@@ -119,11 +120,11 @@
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
       <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/examples_plots" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/examples_plots/real_plot_4_minimal_class_newWindow.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/v11_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -132,7 +133,7 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="v11_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+    <configuration name="v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="Source-Meter-PyMeasure" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
@@ -144,7 +145,7 @@
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/v11_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -153,7 +154,7 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+    <configuration name="v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="Source-Meter-PyMeasure" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
@@ -165,7 +166,7 @@
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -176,11 +177,11 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.v13_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots_All_in_One_Class" />
         <item itemvalue="Python.v12_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots_Dynamic_Plots" />
         <item itemvalue="Python.v11_console_UI_dynamic_Dict_OptionMenu_BackEnd_SideBar_Multi_Plots" />
         <item itemvalue="Python.real_plot_4_minimal_class_newWindow" />
         <item itemvalue="Python.real_plot_3b_minimal_class(without_self)" />
-        <item itemvalue="Python.new_Window" />
       </list>
     </recent_temporary>
   </component>
